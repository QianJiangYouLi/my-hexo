<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>01-关于JavaScript的类型与值的思考</title>
    <link href="/2022/12/24/01-%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2022/12/24/01-%E5%85%B3%E4%BA%8EJavascript%E7%9A%84%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>很多开发者认为 JavaScript 是动态语言，没有类型。</p><p>ECMAScript 对此的界定是：ECMAScript 语言中所有的值都有一个对应的语言类型，包括<br>Undefined、Null、Boolean、String、Number、Object 和 Symbol。</p><p>也有很多开发者认为 JavaScript 中的类型应该称为标签或者子类型。</p><p>但抛开学术界对类型的定义，对 JavaScript，类型就是值的内部特征，定义了值的行为，让语言引擎和开发者方便区别于其他的值。这<br>样说或许不够准确，但足以让人理解。</p><p>准确认识 JS 的类型很重要吗？我的回答是很重要。</p><p>只有准确理解数据类型，才能正确合理的进行数据类型转换，几乎所有的 JS 程序都会涉及某种形式的强制数据类型转换。</p><p>强制数据类型转换是 JS 中很令人头痛的问题之一，甚至很多开发者认为这是语言设计上的一个缺陷。</p><p>个人认为强制数据类型转换的缺点被过分夸大了，不然都快 2023 年了，JS 为什么都没有对此做出弥补。</p><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h2><p>JS 有七种内置类型：</p><ul><li>空值（null）</li><li>未定义（undefined）</li><li>布尔值（boolean）</li><li>数值（number）</li><li>字符串（string）、</li><li>对象（object）</li><li>符号（symbol）</li></ul><blockquote><p>除了对象，其他统称为基本数据类型</p></blockquote><p>通过<code>tyoeof</code>运算符可以检测值的类型，返回的是类型字符串值。</p><p><img src="https://imgs-bed-1309190146.cos.ap-shanghai.myqcloud.com/%E5%89%8D%E7%AB%AF/202212271826269.png" alt="image-20221227182638772"></p><p>这里有个要注意的地方<code>typeof null </code>返回的不是 null 而是 object。</p><p>这个 bug 由来已久，也存在了二十来年，也许以后也不会修复，毕竟这牵扯到了太多的 Web 系统，修复这个 bug 会带来更多的 bug，<br>甚至导致系统不能正常工作。</p><p>为准确检测 null 值的类型，需要使用符合条件。</p><p><img src="https://imgs-bed-1309190146.cos.ap-shanghai.myqcloud.com/%E5%89%8D%E7%AB%AF/202212271920338.png" alt="image-20221227192034288"></p><p>除了这七种明面的数据类型，在 JS 中，函数通过 typeof 检测返回的是 function，这样看，function 也是 JS 的一个内置类型，但查<br>阅规范就知道，函数实际上是 object 的子类型。</p><p>数组是对象，确切的说也是 object 的子类型。</p><h2 id="值和类型"><a href="#值和类型" class="headerlink" title="值和类型"></a>值和类型</h2><p>JS 中的变量没有类型，只有存储在变量的值才有类型。变量可以随时保存任意类型的值。</p><p>换句话说，JS 不做类型强制，语言引擎不要求变量总是持有与其初始值同类型的值。</p><p><img src="https://imgs-bed-1309190146.cos.ap-shanghai.myqcloud.com/%E5%89%8D%E7%AB%AF/202212271950006.png" alt="image-20221227195016988"></p><h3 id="undefined-和-undeclared"><a href="#undefined-和-undeclared" class="headerlink" title="undefined 和 undeclared"></a>undefined 和 undeclared</h3><p>作用域中，当变量申明了但没有赋值，此时 typeof 返回的就是<code>undefined</code>。当作用域中，没有声明过的变量就是<code>undeclared</code>。</p><p>有一些人将两者等同，但实际上完全是两码事。</p><p><img src="https://imgs-bed-1309190146.cos.ap-shanghai.myqcloud.com/%E5%89%8D%E7%AB%AF/202212271957434.png" alt="image-20221227195749409"></p><p>typeof 在处理没有声明的变量时会返回 undefined，这就很容易造成误解。这是 typeof 的安全防范机制造成的。</p><p><img src="https://imgs-bed-1309190146.cos.ap-shanghai.myqcloud.com/%E5%89%8D%E7%AB%AF/202212272001347.png" alt="image-20221227200126322"></p><p>通过 typeof 安全防范机制可以很好的避免全局变量出现 ReferenceError 错误。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable constant_">DEBUG</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Debugging is starting&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
